/* ==========================================================================
   Chatlist style
   ========================================================================== */


/**
 * CSS 적용가 되는 우선순위는 아래와 같은 순서대로 적용됩니다.
 *
 * 1. !important 룰 쓰면 가장 우선 순위가 되겠습니다. 
 *    예: header {
 *          background: #000 !important;
 *       }
 *
 * 2. HTML 파일에서 inline style로 지정했을 때
 *    예: <header style="background: #000;">
 *
 * 3. #id 로 지정한 스타일
 *    예: #search {
 *          background: #000;
 *        }
 * 4. .class 이나 :pseudo-class 로 지정한 스타일
 *    예: .title {
 *          font-size: 14px;
 *       }
 *        nav:hover {
 *          background: red;
 *        }
 *
 * 5. 태그이름으로 지정한 스타일
 *    예: header {
 *         background: #fff;
 *       }
 *
 * 6. 상위 객체에 의해 상속된 속성
 *
 *
 * inline style 와 !important 는 실무에서 사용을 제한하는 경우가 많습니다. 많은 이유가 있지만 대표적으로 유지보수가 어렵기 때문입니다. 이 두가지 방법은 최후의 수단 입니다.
 * id를 금매달, class를 은매달, tag를 동매달이라고 생각하면 이해하기가 쉽습니다.
 * class가 하나인 것은 은매달 1개(.content) 보다 class가 두개인 것은 은매달 2개(.content.app) 우선순위가 더 높고 갯수 마저 같다면 뒤에 나오는 것이 우선순위가 높습니다. 
 * CSS 이름 자체가 Cascading Style Sheet입니다. 이름대로 뒤에 나오는 CSS가 앞에 나오는 CSS를 덮어씌웁니다.
 *
 * 참고 사이트:
 * 1. https://ofcourse.kr/css-course/%EC%A0%81%EC%9A%A9-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84
 * 2. https://www.zerocho.com/category/CSS/post/588cb95ca63e64132496a5d5
 *
 */


/* ========================================================================== 
	 Header - start
*/


/**
 * 기능 Description :
 * 화면을 아래로 스크롤을 하면 헤더 영역이 브라우저 맨 꼭대기에 붙어 항시 보입니다.
 *
 * CSS :
 * 0. background: 컬러값; 을 먼저 지정을 해 주면
 *    지금 작업하고 있는 영역이 현재 어떤식으로 잡혀있는 지 알 수 있고
 *    영역을 잡으면서 어떻게 변해가고 있는지도 알 수 있습니다.
 * 1. 먼저 헤더의 영억을 잡는 작업을 합니다.
 *    fluid layout을 위해
 *    width: 100%; 
 *    height: 44px; (디자인에 나온 높이 값)를 써서 
 *    브라우저의 100% 넓이와 44px의 높이 만큼을 
 *    헤더 영역이 차지하도록 영역을 잡아 줍니다.  
 * 2. 헤더 영역이 스크롤 할 때 
 *    position: fixed; 
 *    top: 0; 
 *    left: 0; 을 주면 
 *    항상 브라우저의 상단에 자리잡게 됩니다. 
 * 3. z-index: 숫자 값; (숫자가 크면 클 수록 위에 쌓이는 방식입니다.)
 *    헤더 영역은 컨텐츠 보다 위에 있어야 하기 때문에
 *    z-index: 100; 을 주었습니다.
 *
 * width: 100% 를 쓰는 이유 :
 * position은 레이어를 배치하는데 필요한 속성 중 하나입니다.
 * position absolute 나 fixed를 쓰게 되면 
 * block level 태그들의 특징인 가로 크기 100%가 사라지게 됩니다.
 * 100% 가로 크기를 구현 해야 될 때에는 꼭 반드시 width: 100%; 크기를 주어야 영역을 구현 할 수 있습니다.
 */

header {
    position: fixed;
    top: 0;
    left: 0;
    z-index: 100;
    width: 100%;
    height: 44px;
    background: #4c2f31;
}


/**
 * 헤더 영역의 h1 에 디자인과 동일하게 스타일을 입혀줍니다.
 */

header .title {
    color: #FFF;
    text-align: center;
    font-size: 17px;
    line-height: 44px;
}


/**
 * 버튼 디자인에 width 와 height 가 없어도
 * 사용자가 터치 할 수 있는 영역을 지정해 주어
 * 모든 사용자들이 쉽게 터치 할 수 있는
 * touchable area 를 만들어 줍니다. (웹 접근성과도 관련있습니다.)
 */

header .btn_edit {
    position: absolute;
    top: 0;
    left: 0;
    width: 44px;
    height: 44px;
    font-size: 16px;
    color: #fff;
}


/* Header - end
========================================================================== */


/* ========================================================================== 
	 Main Navigation - start
*/


/**
 * 기능 Description :
 * 화면을 스크롤해도 메인 내비는 항상 브라우저 맨 아래에 붙어 항시 보입니다.
 *
 * CSS :
 * 헤더 영역과는 다르게 메인 내비는 브라우저의 아래에 붙어야 합니다.
 * position: fixed; 를 지정한 후,
 * bottom: 0; 브라우저의 아래에서 0 만큼 뛰우고 
 * left: 0; 을 주면
 * 항상 브라우저의 하단에 자리잡게 됩니다. 
 *
 */

.main_nav {
    position: fixed;
    bottom: 0;
    left: 0;
    z-index: 100;
    width: 100%;
    height: 50px;
}


/**
 * 메인 내비가 차지할 영역만큼 잡아줍니다.
 */

.main_nav ul {
    width: 100%;
    height: 50px;
    background: #f7f7f7;
}


/**
 * 메인 내비를 디자인이 나온대로 일렬로 옆에 따다닥 붙여서 구현을 해야하는데
 * 이 디자인을 css로 구현 할 수 있는 여러가지 방법이 있습니다.
 * 그 중에, 한가지 방법인 float가 이 상황에서는 flex를 제외하고 가장 적합한 것 같아, float를 사용하겠습니다. 
 * float 속성은 width와 height등 태그의 영역을 이용해 배치가 됩니다.
 * 100%를 4등분 나누면 25% 입니다.
 * width: 25%; 주고 height 를 적용해 줍니다.
 * 그 후, float: left; 를 주면 왼쪽에서부터 태그를 쓴 순서대로 옆에 붙게 됩니다.
 * 
 * !! float 쓸 때 이것만은 꼭 지켜주세요 !! 
 * float 속성이 가지고 있는 문제점들을 심층적으로 분석하기엔 무리가 있음으로 문제 해결을 할 수 있는 방법에 대해 설명 드리겠습니다. 
 * float 를 쓴 부모 태그의 :after에 content:''; display: block; clear: both;를 해주면 문제를 해결 할 수 있습니다. 
 * clear를 부모에 잘 넣었는지 잘 모를 수도 있으니 class명으로 따로 지장해주어
 * 부모 태그에 직접 주는 방식이 좋다 생각하여 적용 하였습니다.
 * .clearfix 라는 클래스 이름에
 * .clearfix::after {
 *     content: '';
 *    display: block;
 *    clear: both;
 * }
 */

.main_nav li {
    float: left;
    width: 25%;
    height: 50px;
}


/**
 * a 태그는 inline level 입니다.
 * a 태그의 영역을 주어야 clickable 한 영역 및 마우스를 호버 했을 때 
 * 커서가 손가락 모양으로 변하는 등을 구현할 수 있습니다.
 * display: block; 으로 block level로 바꾸어줍니다.
 * 그럼 이제 영역을 제대로 잡을 수 있게 됩니다. 
 * block level이 가지고 있는 특징이 가로 길이 100% 이어서
 * a 태그를 감싸고 있는 li 태그에 이미 width: 25%를 주었기 때문에
 * 부모의 넓이 만큼 넓이 100%로 영역을 차지하게 됩니다. 하지만
 * 높이는 컨텐츠 만큼만 차지하기 때문에 디자인과 동일하게 보이도록
 * height: 50px; 를 지정해 줍니다.
 */

.main_nav a {
    display: block;
    padding-top: 9px;
    height: 50px;
    font-size: 9px;
    color: #ccc;
    text-align: center;
}

.main_nav svg {
    display: block;
    margin: 0 auto;
    padding-bottom: 6px;
    width: 25px;
    height: 25px;
}

.main_nav a:hover path,
.main_nav a:hover g {
    fill: #4c2f31;
    transition: all .4s ease-in-out;
}

.main_nav a:hover {
    font-weight: 700;
    color: #4c2f31;
    transition: all .2s ease-in-out;
}


/**
 * hover 
 */


/*  Main Navigation - end
 ========================================================================== */


/* ========================================================================== 
	 Main Content - start
*/

main {
    margin-top: 44px;
    margin-bottom: 50px;
}


/**** 
 add chatroom menu - start  
 ****/

.add_room .btn_openMenu {
    position: fixed;
    z-index: 300;
    bottom: 72px;
    right: 16px;
    overflow: hidden;
    width: 58px;
    height: 58px;
}


/*
 * a slightly better method for putting images over text
 * users can see text if image loads slowly - so the content or area is not empty
 */

.add_room .btn_openMenu::after {
    position: absolute;
    left: 0;
    top: 0;
    content: "";
    display: block;
    width: 58px;
    height: 58px;
    border-radius: 50%;
    background: url(../images/icon_add.png) center center no-repeat #ffeb35;
    background-size: 28px 16px;
}

.add_room:hover .cover {
    display: block;
}

.add_room .cover {
    display: none;
    position: fixed;
    z-index:300;
    bottom: 74px;
    right: 16px;
    width: 58px;
    height: 252px;
}

.add_menu {
    position: fixed;
    bottom: 72px;
    right: 16px;
}

.add_menu a {
    font-size: 12px;
    line-height: 54px;
    color: #4c2f31;
    text-indent: -60px;
}

.normal {
    position: absolute;
    bottom: 74px;
    right: 2px;
    width: 54px;
    height: 54px;
    border-radius: 50%;
    background: url(../images/icon_chat.png) center center no-repeat #eee;
    background-size: 20px 18px;
}

.private {
    position: absolute;
    bottom: 136px;
    right: 2px;
    width: 54px;
    height: 54px;
    border-radius: 50%;
    background: url(../images/icon_chat.png) center center no-repeat #eee;
    background-size: 20px 18px;
}

.open {
    position: absolute;
    bottom: 198px;
    right: 2px;
    width: 54px;
    height: 54px;
    border-radius: 50%;
    background: url(../images/icon_chat.png) center center no-repeat #eee;
    background-size: 20px 18px;
}


/**** 
 add chatroom menu - end  
 ****/


/**** 
 search bar - start
 ****/

.search_bar {
    position: relative;
    padding: 8px;
    width: 100%;
    height: 52px;
}

.search_bar label {
    position: absolute;
    top: 20px;
    left: 16px;
    width: 12px;
    height: 12px;
    background: url(../images/icon_search.png) top left no-repeat;
    background-size: 12px;
    text-indent: -9999px;
}

.search_bar input {
    padding: 0 28px;
    width: 100%;
    height: 36px;
    border: 0 none;
    border-radius: 10px;
    font-size: 14px;
    background: #f1f2f4;
}


/**
 * input 창을 클릭 하기 전에 사용자들이 볼 수 있도록
 * input 창안에 텍스트를 적은것을 placholder text라고 합니다.
 * input::placeholder 로 텍스트에 스타일을 입힐 수 있습니다.
 */

.search_bar input::placeholder {
    font-size: 16px;
    color: #aaa;
}


/**
 * input 창에 클릭했을 때 브라우저 기본 세팅으로 들어가있는 태두리를
 * outline: none; 으로 없애줍니다.
 * 주의사항: outline을 없애게 되면 키보드 tab 키를 사용해서 사이트를 둘러보는 분들이 
 * tab 키를 사용했을 때 아무런 피드백을 받을 수 없게 됩니다. 
 * outline을 꼭 없애야 한다면 :focus 에 따로 스타일을 입혀 
 * :focus가 되어 있는 상태라는것을 알려주는것이 접근성을 준수 하면서 
 * 사이트 디자인의 통일성을 유지 할 수 있는 방법입니다. 
 
 * Transition
 * 사용자가 search 창을 클릭 했을 때 search 창의 
 * 상태가 자연스럽게 바뀌도록 transition을 넣어줍니다.
 */

.search_bar input:focus {
    outline: none;
    background: #fff;
    border: 1px solid #ccc;
    transition: all .45s ease-out;
}


/**** 
 search bar - end
 ****/


/**** 
 content list - start
 ****/


/**
 * 
 */

.chatroom_list li {
    position: relative;
    padding: 14px 74px 12px 77px;
    width: 100%;
    height: 72px;
    border: 1px solid #eee;
}


/**
 * 
 */

.chatroom_list .room_title {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    margin-bottom: 6px;
    height: 15px;
    font-size: 15px;
    color: #2e2e2e;
}


/**
 * 텍스트가 길어서 2쥴 이상일 때 뒤에 [...] 하고 싶은데
 * 원래 한줄일때 처리했던 방식은 
 * text-overflow: ellipsis; 요 아이는 한줄일때만 적용이 됩니다.
 * css로 처리하는 방법이 여러가지 있지만 좋은 방법은 아닌것 같습니다.
 * 참조: https://css-tricks.com/line-clampin/
 * (JavaScript로 처리하면 깔끔하게 처리할 수 있습니다.^^)
 */

.chatroom_list .last-msg {
    overflow: hidden;
    white-space: nowrap;
    font-size: 11px;
    line-height: 13px;
    color: #a1a1a1;
}


/**
 * 디자인에서 프로필 이미지는 항상 각 리스트에서
 * 위에서부터 10px, 왼쪽 옆에서부터 12px 떨어져 있습니다.
 * 그래서 position: absolute; 
 * 
 */

.profile {
    position: absolute;
    top: 10px;
    left: 12px;
    overflow: hidden;
    width: 52px;
    height: 52px;
    border-radius: 50%;
    border: 1px solid #e0e0e0;
}


/**
 * 프로필 이미지 위 아래 중앙 정렬하는 법
 * css 로 중앙정렬하는 방법은 여러가지가 있습니다. 
 * 지금 프로필 이미지의 케이스에서는
 * 각각의 프로필 이미지들의 사이즈들이 달라서 
 * 다 똑같은 width 와 height 를 가지고 있지 않습니다.
 * 이러 했을 때 transform: translate(-50%, -50%);
 */

.profile img {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 80px;
}

.chatroom_list .noti_update {
    position: absolute;
    top: 12px;
    right: 12px;
}

.noti_update .msg_date {
    font-size: 9px;
    color: #a1a1a1;
}

.noti_update .noti {
    position: absolute;
    top: 24px;
    right: 0;
    padding: 6px 12px;
    border-radius: 24px;
    font-size: 12px;
    color: #fff;
    background: #f1624a;
}


/**** 
 content list - end
 ****/


/* ========================================================================== 
	 Anything used in general
*/


/**
 * a11y hidden method
 */

.a11y_hidden {
    overflow: hidden;
    position: absolute;
    top: -9999px;
    left: -9999px;
    width: 1px;
    height: 1px;
    background: red;
}


/**
 * to clear the floats to any parent elements 
 */

.clearfix::after {
    content: '';
    display: block;
    clear: both;
}